{
  "Comment": "Run Spark jobs on auto-started EMR cluster, run Glue Crawlers and Athena queries with fault tolerance",
  "StartAt": "Create EMR Cluster",
  "States": {
    "Create EMR Cluster": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:createCluster.sync",
      "Parameters": {
        "Name": "car-rental-analytics-cluster",
        "ReleaseLabel": "emr-6.15.0",
        "Applications": [
          {
            "Name": "Spark"
          }
        ],
        "Instances": {
          "InstanceGroups": [
            {
              "InstanceRole": "MASTER",
              "InstanceType": "m5.xlarge",
              "InstanceCount": 1
            },
            {
              "InstanceRole": "CORE",
              "InstanceType": "m5.xlarge",
              "InstanceCount": 2
            }
          ],
          "KeepJobFlowAliveWhenNoSteps": true,
          "TerminationProtected": false,
          "Ec2SubnetId": "subnet-0e0fd1537c37c9e66"
        },
        "JobFlowRole": "EMR_EC2_DefaultRole",
        "ServiceRole": "EMR_DefaultRole",
        "VisibleToAllUsers": true
      },
      "ResultPath": "$.CreateClusterResult",
      "Next": "Save ClusterId"
    },
    "Save ClusterId": {
      "Type": "Pass",
      "Parameters": {
        "ClusterId.$": "$.CreateClusterResult.Cluster.Id"
      },
      "ResultPath": "$.ClusterInfo",
      "Next": "Add Spark Step 1"
    },
    "Add Spark Step 1": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "TimeoutSeconds": 900,
      "ResultPath": null,
      "Parameters": {
        "ClusterId.$": "$.ClusterInfo.ClusterId",
        "Step": {
          "Name": "Run job1_location_metrics",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "cluster",
              "s3://car-rental-data-project/scripts/job1_location_metrics.py",
              "s3://car-rental-data-project/raw",
              "s3://car-rental-data-project/processed"
            ]
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.SparkStep1Error",
          "Next": "Fail Spark Step 1"
        }
      ],
      "Next": "Add Spark Step 2"
    },
    "Fail Spark Step 1": {
      "Type": "Fail",
      "Error": "SparkStep1Failed",
      "Cause": "Spark Step 1 failed and workflow terminated."
    },
    "Add Spark Step 2": {
      "Type": "Task",
      "Resource": "arn:aws:states:::elasticmapreduce:addStep.sync",
      "TimeoutSeconds": 900,
      "ResultPath": null,
      "Parameters": {
        "ClusterId.$": "$.ClusterInfo.ClusterId",
        "Step": {
          "Name": "Run job2_user_metrics",
          "ActionOnFailure": "CONTINUE",
          "HadoopJarStep": {
            "Jar": "command-runner.jar",
            "Args": [
              "spark-submit",
              "--deploy-mode",
              "cluster",
              "s3://car-rental-data-project/scripts/job2_user_metrics.py",
              "s3://car-rental-data-project/raw",
              "s3://car-rental-data-project/processed"
            ]
          }
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.SparkStep2Error",
          "Next": "Fail Spark Step 2"
        }
      ],
      "Next": "Run Glue Crawlers"
    },
    "Fail Spark Step 2": {
      "Type": "Fail",
      "Error": "SparkStep2Failed",
      "Cause": "Spark Step 2 failed and workflow terminated."
    },
    "Run Glue Crawlers": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Run Location Crawler",
          "States": {
            "Run Location Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "crawler_location_metrics"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Run Vehicle Crawler",
          "States": {
            "Run Vehicle Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "crawler_vehicle_metrics"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Run User Crawler",
          "States": {
            "Run User Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "crawler_user_metrics"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Run Daily Crawler",
          "States": {
            "Run Daily Crawler": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
              "Parameters": {
                "Name": "crawler_daily_metrics"
              },
              "End": true
            }
          }
        }
      ],
      "Next": "Run Athena Queries"
    },
    "Run Athena Queries": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Top 5 Users by Spending",
          "States": {
            "Top 5 Users by Spending": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
              "Parameters": {
                "QueryString": "SELECT user_id, first_name, last_name, total_spent FROM user_metrics ORDER BY total_spent DESC LIMIT 5;",
                "QueryExecutionContext": {
                  "Database": "car_rental_db"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://car-rental-data-project/athena-results/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Daily Revenue Trend",
          "States": {
            "Daily Revenue Trend": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
              "Parameters": {
                "QueryString": "SELECT rental_date, total_transactions, daily_revenue FROM daily_metrics ORDER BY rental_date;",
                "QueryExecutionContext": {
                  "Database": "car_rental_db"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://car-rental-data-project/athena-results/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Top Locations by Revenue",
          "States": {
            "Top Locations by Revenue": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:athena:startQueryExecution",
              "Parameters": {
                "QueryString": "SELECT pickup_location, total_revenue FROM location_metrics ORDER BY total_revenue DESC LIMIT 5;",
                "QueryExecutionContext": {
                  "Database": "car_rental_db"
                },
                "ResultConfiguration": {
                  "OutputLocation": "s3://car-rental-data-project/athena-results/"
                }
              },
              "End": true
            }
          }
        }
      ],
      "End": true
    }
  }
}
